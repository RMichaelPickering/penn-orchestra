= Setting Up Your Development Environment in Eclipse=

Here's the way that we set up our development environment:

  # Get the Eclipse Classic package from, for example, [http://www.eclipse.org/downloads/]
  # Install the [http://m2eclipse.sonatype.org/ M2Eclipse] Eclipse plugin. At a minimum you'll need the following items:
    * Maven Integration/Maven Embedder
    * Maven Integration/Maven Integration for Eclipse
    * Maven Optional Components/Maven SCM Handler for Subclipse
  # Install the [http://subclipse.tigris.org/ Subclipse] Eclipse plugin. At a minimum you'll need the required items: 
    * Subclipse/Subclipse
    * Subclipse/Subversion Client Adapter
    * Sublcipse/Subversion JavaHL Native Library Adapter
  # Install the [http://testng.org/doc/eclipse.html TestNG] Eclipse plugin
  # Fire up Eclipse and switch over to the `SVN Repository Exploring` perspective and create a repository at [http://penn-orchestra.googlecode.com/svn/] if you're not a commiter or [https://penn-orchestra.googlecode.com/svn/] if you're a committer
  # Navigate to http(s)://penn-orchestra.googlecode.com/branches and right-click (ctrl-click on Macs) on orchestra-0.1.x and choose _Check out as Maven Project_
    * Some of us like to choose the Name Template `[`artifactId`]`-`[`version`]` under _Advanced_ to give a quick indicator of which branch we're working on but that doesn't seem to work on OS X
    * Hit _Finish_
  # Switch over to the Java perspective

= Running the TestNG tests =

You should be able to run `engine/testng.xml` right out of the box with the TestNG plugin. However, some of the tests (see below) require access to a DB2 instance. The default Maven build runs without these tests. To have Maven run these tests the profile {{{requires-database-tests}}} must be active. The connection information is supplied to the tests via Maven resource filtering, so the following variables need to be set as described [http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html here]:
   * {{{testng.db-url}}}
   * {{{testng.db-user}}}
   * {{{testng.db-password}}}

These are the testng.xml files we have:

====`engine/testng.xml`====
these are the unit tests which do not rely on a db2 instance. It can be run by the TestNG plugin right out of the box. It is the only one of the four files which is run by the default Maven build.

====`engine/orchestra-test-testng.xml`====
This runs the functional tests. It relies on a db2 instance and therefore on the Maven variables, so it cannot be run by the testng plugin without some db2 and Maven setup work. It is thus not run as part of the Maven build unless the profile requires-database-tests is active.

====`engine/requires-database-testng.xml`====
these are unit tests which rely on a db2 instance, so the same things apply here.

====`gui/gui-orchestra-test-testng.xml`====
this ran the gui functional test which is now non-functional. We'd have to fix the problem of having two gui's open at the same time to get it running again. 